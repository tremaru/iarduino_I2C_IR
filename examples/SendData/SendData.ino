// ИМИТАЦИЯ ИК ПУЛЬТА ДУ PHILIPS RC6:          // * Строки со звёздочкой являются необязательными.
// (разные пульты используют разные команды)   //
                                               //
#include <Wire.h>                              // * Подключаем библиотеку для работы с аппаратной шиной I2C.
#include <iarduino_I2C_IR.h>                   //   Подключаем библиотеку для работы с ИК-приёмником/передатчиком I2C-flash.
iarduino_I2C_IR ir(0x09);                      //   Объявляем объект ir   для работы с функциями и методами библиотеки iarduino_I2C_IR, указывая адрес модуля на шине I2C.
                                               //   Если объявить объект без указания адреса (iarduino_I2C_IR ir;), то адрес будет найден автоматически.
//    Определяем выводы кнопок:                //
const uint8_t KEY_VOL_UP  = 2;                 //   Номер вывода кнопки увеличения громкости.     При нажатии кнопки вывод KEY_VOL_UP  соединяется с GND.
const uint8_t KEY_VOL_DN  = 3;                 //   Номер вывода кнопки уменьшения громкости.     При нажатии кнопки вывод KEY_VOL_DN  соединяется с GND.
const uint8_t KEY_CHAN_UP = 4;                 //   Номер вывода кнопки увеличения номера канала. При нажатии кнопки вывод KEY_CHAN_UP соединяется с GND.
const uint8_t KEY_CHAN_DN = 5;                 //   Номер вывода кнопки уменьшения номера канала. При нажатии кнопки вывод KEY_CHAN_DN соединяется с GND.
                                               //
//    Определяем команды кнопок:               //
const uint8_t VAL_VOL_UP  = 0x10;              //   Команда увеличения громкости.
const uint8_t VAL_VOL_DN  = 0x11;              //   Команда уменьшения громкости.
const uint8_t VAL_CHAN_UP = 0x20;              //   Команда увеличения номера канала.
const uint8_t VAL_CHAN_DN = 0x21;              //   Команда уменьшения номера канала.
                                               //
//    Определяем адрес ИК-устройства:          //
const uint8_t VAL_ADDRESS = 0;                 //   Адрес ИК-устройства позволяет одним устройствам не реагировать на команды других устройств.
                                               //   Например кондиционер не изменит температуру при переключении канала телевизора.
void setup(){                                  //
     delay(500);                               // * Ждём завершение переходных процессов связанных с подачей питания.
     pinMode(KEY_VOL_UP , INPUT_PULLUP);       //   Переводим вывод KEY_VOL_UP  в режим входа с подтяжкой.
     pinMode(KEY_VOL_DN , INPUT_PULLUP);       //   Переводим вывод KEY_VOL_DN  в режим входа с подтяжкой.
     pinMode(KEY_CHAN_UP, INPUT_PULLUP);       //   Переводим вывод KEY_CHAN_UP в режим входа с подтяжкой.
     pinMode(KEY_CHAN_DN, INPUT_PULLUP);       //   Переводим вывод KEY_CHAN_DN в режим входа с подтяжкой.
     ir.begin();                               //   Инициируем работу с ИК-приёмником/передатчиком I2C-flash.
     ir.setProtocol(IR_RC6);                   //   Указываем протокол для приёма/передачи данных по ИК-каналу.
     ir.setInterval(0);                        // * Указываем использовать интервал между пакетами повторов в соответствии с указанным ИК протоколом. Модуль по умолчанию использует интервалы ИК протоколов.
}                                              //
                                               //
//   Определяем функцию отправки данных:       //
void myFunction(uint8_t key, uint8_t val){     //   Функция принимает 2 параметра: key - номер вывода кнопки, val - команда которую требуется отправлять при нажатии и удержании кнопки.
//   Проверяем, нажата ли кнопка key:          //
     if( digitalRead(key) ){ return; }         //   Если вывод key не соединён с GND, то выходим из функции (кнопка не нажата).
//   Указываем модулю отправлять ИК пакеты:    //
     ir.autoSend(VAL_ADDRESS, val);            //   Указываем модулю отправить пакет данных (байт адреса VAL_ADDRESS и байт команды val) и автоматически отправлять пакеты повторов пока не будет вызван метод ir.autoStop().
     delay(50);                                // * Устраняем дребезг контактов кнопки при нажатии.
//   Ждём пока не будет отпущена кнопка key:   //
     while(!digitalRead(key)){;}               //   Цикл выполняется пока вывод key соединён с GND.
//   Останавливаем отправку ИК пакетов:        //
     ir.autoStop();                            //   Указываем модулю прекратить отправку пакетов.
     delay(50);                                // * Устраняем дребезг контактов кнопки при отпускании.
}                                              //
                                               //
void loop(){                                   //
//   Выполняем функцию myFunction() для кнопок://
     myFunction(KEY_VOL_UP,  VAL_VOL_UP );     //   Отправляем данные при нажатии кнопки увеличения громкости.
     myFunction(KEY_VOL_DN,  VAL_VOL_DN );     //   Отправляем данные при нажатии кнопки уменьшения громкости.
     myFunction(KEY_CHAN_UP, VAL_CHAN_UP);     //   Отправляем данные при нажатии кнопки увеличения номера канала.
     myFunction(KEY_CHAN_DN, VAL_CHAN_DN);     //   Отправляем данные при нажатии кнопки уменьшения номера канала.
}                                              //

/*
 *   Для отправки данных, в функции myFunction(), используются методы ir.autoSend() и ir.autoStop();
 *   Если заменить метод ir.autoSend() на ir.send(), то можно удалить строку ir.autoStop(), при этом
 *   с каждым нажатием на кнопку будет отправляться только один пакет с данными о нажатой кнопке (без пакетов повторов).
 *   Такой метод можно использовать для кнопок с цифрами (удержание кнопки будет воспринято как кратковременное нажатие),
 *   если на стороне приёмника ИК команд не реализован метод отличия нажимаемой кнопки от удерживаемой.
 */